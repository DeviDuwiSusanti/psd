Traceback (most recent call last):
  File "C:\Users\Heviaa\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Heviaa\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Heviaa\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Heviaa\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Heviaa\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Heviaa\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Heviaa\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=32),
    "Ridge Regression": Ridge(alpha=1.0)
}

# Dictionary untuk menyimpan hasil evaluasi
results = {}

# Iterasi setiap model
for name, model in models.items():
    # Latih model
    model.fit(X_train, y_train)

    # Prediksi pada data uji
    y_pred = model.predict(X_test)

    # Evaluasi untuk setiap target (Kurs Jual dan Kurs Beli)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mape = mean_absolute_percentage_error(y_test, y_pred) * 100  # Dalam persen

    # Simpan hasil evaluasi
    results[name] = {"RMSE": rmse, "MAPE": mape}

    # Kembalikan hasil prediksi ke skala asli untuk kedua target
    y_pred_original = scaler_target.inverse_transform(y_pred)
    y_test_original = scaler_target.inverse_transform(y_test)

    # Plot hasil prediksi untuk Kurs Jual dan Kurs Beli dalam satu plot
    plt.figure(figsize=(15, 6))

    # Plot untuk Kurs Jual dan Kurs Beli
    plt.plot(y_test.index, y_test_original[:, 0], label="Actual Kurs Jual", color="blue", linestyle='-')
    plt.plot(y_test.index, y_pred_original[:, 0], label=f"Predicted Kurs Jual ({name})", color="red", linestyle='--')
    
    plt.plot(y_test.index, y_test_original[:, 1], label="Actual Kurs Beli", color="green", linestyle='-')
    plt.plot(y_test.index, y_pred_original[:, 1], label=f"Predicted Kurs Beli ({name})", color="orange", linestyle='--')

    # Tambahkan detail plot
    plt.title(f'Actual vs Predicted Kurs Jual and Kurs Beli ({name})')
    plt.xlabel('Tanggal')
    plt.ylabel('Kurs')
    plt.legend()
    plt.grid(True)

    # Tampilkan plot
    plt.show()

# Tampilkan hasil evaluasi
print("HASIL EVALUASI MODEL")
for model, metrics in results.items():
    print(f"{model}:\n  RMSE: {metrics['RMSE']}\n ")

<!-- MAPE: {metrics['MAPE']}%\n -->

# Menentukan model terbaik berdasarkan RMSE atau MAPE (misalnya RMSE terendah)
best_model_name = min(results, key=lambda x: results[x]['RMSE'])  # Model dengan RMSE terendah
best_model_rmse = results[best_model_name]['RMSE']
best_model_mape = results[best_model_name]['MAPE']

------------------


[1;36m  Cell [1;32mIn[11], line 55[1;36m[0m
[1;33m    <!-- MAPE: {metrics['MAPE']}%\n -->[0m
[1;37m    ^[0m
[1;31mSyntaxError[0m[1;31m:[0m invalid syntax


